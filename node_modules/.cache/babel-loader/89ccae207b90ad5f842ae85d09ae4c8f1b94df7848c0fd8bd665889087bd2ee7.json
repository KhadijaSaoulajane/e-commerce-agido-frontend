{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api';\n\n// Set up a base HTTP instance if needed\nconst http = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst ApiService = {\n  fetchCustomers() {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          data: [{\n            id: 1,\n            email: 'khadija.ss',\n            account: {\n              balance: 100,\n              transactions: [{\n                created_at: '11-09-2023',\n                transaction_id: 37928,\n                amount: 36,\n                type: 'W'\n              }]\n            }\n          }, {\n            id: 2,\n            email: 'ss.ss',\n            account: {\n              balance: 9000,\n              transactions: [{\n                created_at: '19-09-2023',\n                transaction_id: 328,\n                amount: 100,\n                type: 'D'\n              }]\n            }\n          }, {\n            id: 3,\n            email: 'salma.ss',\n            account: {\n              balance: 90,\n              transactions: [{\n                created_at: '20-09-2023',\n                transaction_id: 928,\n                amount: 368,\n                type: 'D'\n              }]\n            }\n          }]\n        });\n      }, 1000);\n    });\n  },\n  fetchCustomer() {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          data: {\n            id: 1,\n            email: 'khadija.ss',\n            account: {\n              balance: 100,\n              transactions: [{\n                created_at: '11-09-2023',\n                transaction_id: 37928,\n                amount: 36,\n                type: 'W'\n              }]\n            }\n          }\n        });\n      }, 1000);\n    });\n  },\n  getUser(user) {\n    return http.post('/user', user);\n  },\n  getAllCustomerAccounts() {\n    return http.get(`/accounts`);\n  },\n  register(user) {\n    return http.post('/user/register', user);\n  },\n  approveTransaction(transaction_id) {\n    return http.get(`/transaction/approve/${transaction_id}`);\n  }\n  /* fetchCustomerTransactions(customerId) {\n    return http.get(`/customers/${customerId}/transactions`);\n  },\n  deposit(amount, customerId) {\n    return http.post(`/customers/${customerId}/deposit`, { amount });\n  },\n  withdraw(amount, customerId) {\n    return http.post(`/customers/${customerId}/withdraw`, { amount });\n  },\n   */\n};\nexport default ApiService;","map":{"version":3,"names":["axios","API_BASE_URL","http","create","baseURL","headers","ApiService","fetchCustomers","Promise","resolve","setTimeout","data","id","email","account","balance","transactions","created_at","transaction_id","amount","type","fetchCustomer","getUser","user","post","getAllCustomerAccounts","get","register","approveTransaction"],"sources":["/Users/gigi/Desktop/Imero/react-cbwvkr/src/services/ApiService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8080/api';\n\n// Set up a base HTTP instance if needed\nconst http = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nconst ApiService = {\n  fetchCustomers() {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({\n          data: [\n            {\n              id: 1,\n              email: 'khadija.ss',\n              account: {\n                balance: 100,\n                transactions: [\n                  {\n                    created_at: '11-09-2023',\n                    transaction_id: 37928,\n                    amount: 36,\n                    type: 'W',\n                  },\n                ],\n              },\n            },\n            {\n              id: 2,\n              email: 'ss.ss',\n              account: {\n                balance: 9000,\n                transactions: [\n                  {\n                    created_at: '19-09-2023',\n                    transaction_id: 328,\n                    amount: 100,\n                    type: 'D',\n                  },\n                ],\n              },\n            },\n            {\n              id: 3,\n              email: 'salma.ss',\n              account: {\n                balance: 90,\n                transactions: [\n                  {\n                    created_at: '20-09-2023',\n                    transaction_id: 928,\n                    amount: 368,\n                    type: 'D',\n                  },\n                ],\n              },\n            },\n          ],\n        });\n      }, 1000);\n    });\n  },\n  fetchCustomer() {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({\n          data: {\n            id: 1,\n            email: 'khadija.ss',\n            account: {\n              balance: 100,\n              transactions: [\n                {\n                  created_at: '11-09-2023',\n                  transaction_id: 37928,\n                  amount: 36,\n                  type: 'W',\n                },\n              ],\n            },\n          },\n        });\n      }, 1000);\n    });\n  },\n  getUser(user) {\n    return http.post('/user',  user );\n  },\n  getAllCustomerAccounts() {\n    return http.get(`/accounts`);\n  },\n  register(user){\n    return http.post('/user/register',  user );\n  },\n  approveTransaction(transaction_id) {\n    return http.get(`/transaction/approve/${transaction_id}`);\n  }\n    /* fetchCustomerTransactions(customerId) {\n      return http.get(`/customers/${customerId}/transactions`);\n    },\n    deposit(amount, customerId) {\n      return http.post(`/customers/${customerId}/deposit`, { amount });\n    },\n    withdraw(amount, customerId) {\n      return http.post(`/customers/${customerId}/withdraw`, { amount });\n    },\n\n    */\n\n\n};\n\nexport default ApiService;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,IAAI,GAAGF,KAAK,CAACG,MAAM,CAAC;EACxBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,MAAMC,UAAU,GAAG;EACjBC,cAAcA,CAAA,EAAG;IACf,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC9BC,UAAU,CAAC,MAAM;QACfD,OAAO,CAAC;UACNE,IAAI,EAAE,CACJ;YACEC,EAAE,EAAE,CAAC;YACLC,KAAK,EAAE,YAAY;YACnBC,OAAO,EAAE;cACPC,OAAO,EAAE,GAAG;cACZC,YAAY,EAAE,CACZ;gBACEC,UAAU,EAAE,YAAY;gBACxBC,cAAc,EAAE,KAAK;gBACrBC,MAAM,EAAE,EAAE;gBACVC,IAAI,EAAE;cACR,CAAC;YAEL;UACF,CAAC,EACD;YACER,EAAE,EAAE,CAAC;YACLC,KAAK,EAAE,OAAO;YACdC,OAAO,EAAE;cACPC,OAAO,EAAE,IAAI;cACbC,YAAY,EAAE,CACZ;gBACEC,UAAU,EAAE,YAAY;gBACxBC,cAAc,EAAE,GAAG;gBACnBC,MAAM,EAAE,GAAG;gBACXC,IAAI,EAAE;cACR,CAAC;YAEL;UACF,CAAC,EACD;YACER,EAAE,EAAE,CAAC;YACLC,KAAK,EAAE,UAAU;YACjBC,OAAO,EAAE;cACPC,OAAO,EAAE,EAAE;cACXC,YAAY,EAAE,CACZ;gBACEC,UAAU,EAAE,YAAY;gBACxBC,cAAc,EAAE,GAAG;gBACnBC,MAAM,EAAE,GAAG;gBACXC,IAAI,EAAE;cACR,CAAC;YAEL;UACF,CAAC;QAEL,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ,CAAC;EACDC,aAAaA,CAAA,EAAG;IACd,OAAO,IAAIb,OAAO,CAAEC,OAAO,IAAK;MAC9BC,UAAU,CAAC,MAAM;QACfD,OAAO,CAAC;UACNE,IAAI,EAAE;YACJC,EAAE,EAAE,CAAC;YACLC,KAAK,EAAE,YAAY;YACnBC,OAAO,EAAE;cACPC,OAAO,EAAE,GAAG;cACZC,YAAY,EAAE,CACZ;gBACEC,UAAU,EAAE,YAAY;gBACxBC,cAAc,EAAE,KAAK;gBACrBC,MAAM,EAAE,EAAE;gBACVC,IAAI,EAAE;cACR,CAAC;YAEL;UACF;QACF,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ,CAAC;EACDE,OAAOA,CAACC,IAAI,EAAE;IACZ,OAAOrB,IAAI,CAACsB,IAAI,CAAC,OAAO,EAAGD,IAAK,CAAC;EACnC,CAAC;EACDE,sBAAsBA,CAAA,EAAG;IACvB,OAAOvB,IAAI,CAACwB,GAAG,CAAE,WAAU,CAAC;EAC9B,CAAC;EACDC,QAAQA,CAACJ,IAAI,EAAC;IACZ,OAAOrB,IAAI,CAACsB,IAAI,CAAC,gBAAgB,EAAGD,IAAK,CAAC;EAC5C,CAAC;EACDK,kBAAkBA,CAACV,cAAc,EAAE;IACjC,OAAOhB,IAAI,CAACwB,GAAG,CAAE,wBAAuBR,cAAe,EAAC,CAAC;EAC3D;EACE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,CAAC;AAED,eAAeZ,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}